Module.init = Module.cwrap('PDQ_Init', "number", ["string"]);
Module.createOpen = Module.cwrap('PDQ_CreateOpen', null, ["string", "number"]);
Module.createClosed = Module.cwrap('PDQ_CreateClosed', null, ["string", "number", "number", "number"]);
Module.createMultiNode = Module.cwrap('PDQ_CreateMultiNode', "number", ["number", "string", "number", "number"]);
Module.createNode = Module.cwrap('PDQ_CreateNode', null, ["string", "number", "number"]);
Module.setDemand = Module.cwrap('PDQ_SetDemand', null, ["string", "string", "number"]);
Module.setVisits = Module.cwrap('PDQ_SetVisits', null, ["string", "string", "number", "number"]);
Module.setWUnit = Module.cwrap('PDQ_SetWUnit', null, ["string"]);
Module.setTUnit = Module.cwrap('PDQ_SetTUnit', null, ["string"]);
Module.setComment = Module.cwrap('PDQ_SetComment', null, ["string"]);
Module.getComment = Module.cwrap('PDQ_GetComment', "string", []);
Module.solve = Module.cwrap('PDQ_Solve', "number", ["number"]);
Module.report = Module.cwrap('PDQ_Report', null, []);
Module.printNodes = Module.cwrap('print_nodes', null, []);
Module.getStreamCount = Module.cwrap('PDQ_GetStreamsCount', "number", []);
Module.getNodesCount = Module.cwrap('PDQ_GetNodesCount', "number", []);
Module.getResponse = Module.cwrap('PDQ_GetResponse', "number", ["number", "string"]);
Module.getResidenceTime = Module.cwrap('PDQ_GetResidenceTime', "number", ["string", "string", "number"]);
Module.getThruput = Module.cwrap('PDQ_GetThruput', "number", ["number", "string"]);
Module.getLoadOpt = Module.cwrap('PDQ_GetLoadOpt', "number", ["number", "string"]);
Module.getUtilization = Module.cwrap('PDQ_GetUtilization', "number", ["string", "string", "number"]);
Module.getQueueLength = Module.cwrap('PDQ_GetQueueLength', "number", ["string", "string", "number"]);
Module.getThruMax = Module.cwrap('PDQ_GetThruMax', "number", ["number", "string"]);
Module.setDebug = Module.cwrap('PDQ_SetDebug', null, ["number"]);

Module.VOID = 0;           // Queueing Network Types
Module.OPEN = 1;           // These define the queueing 'network' type in JOB_TYPE struct below
Module.CLOSED = 2;

Module.CEN = 3;            /* standard queueing center */
Module.DLY = 4;            /* unspecified delay center */
Module.MSO = 5;            /* Multi-Server Open queue M/M/m - Was MSQ in 6.2 */
Module.MSC = 6;            /* Multi-Server Closed M/M/m/N/N uses FESC algorithm */
Module.ISRV = 7;           /* infinite server */
Module.FCFS = 8;           /* first-come first-serve */
Module.PSHR = 9;           /* processor sharing */
Module.LCFS = 10;          /* last-come first-serve */
Module.TERM = 11;
Module.TRANS = 12;
Module.BATCH = 13;
Module.EXACT = 14;         // for TERM ; BATCH & FESC workloads (NJG on Nov 16 , 2020)
Module.APPROX = 15;        // for large TERM and BATCH workloads
Module.CANON = 16;         // for TRANS workloads (OPEN network) 
Module.APPROXMSO = 17;     // prep for multiclass MSO workloads (NJG on May 8 , 2016)
Module.VISITS = 18;
Module.DEMAND = 19;
Module.EXACTMVA = 20;      // EXACT alternative
Module.APPROXMVA = 21;     // APPROX alternative
Module.STREAMING = 22;     // CANON alternative (connotes 'continuous' workflow)